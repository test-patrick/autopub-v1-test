name: AutoPub Workflow

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      has_release: ${{ steps.check.outputs.has_release }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install uv
        uses: astral-sh/setup-uv@v5
          
      - name: Check
        id: check
        run: |
          if uvx --from autopub==1.0.0a26 --with pygithub autopub check; then
            echo "has_release=true" >> $GITHUB_OUTPUT
          else
            echo "has_release=false" >> $GITHUB_OUTPUT
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              exit 1
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .autopub
        if: steps.check.outputs.has_release == 'true'
        run: |
          if [ -d ".autopub" ]; then
            echo "Found .autopub directory"
          else
            echo "No .autopub directory found"
            exit 1
          fi
        
      - name: Upload .autopub artifact
        if: steps.check.outputs.has_release == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: autopub-data
          path: .autopub
          include-hidden-files: true

      - name: Debug Info
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "has_release value: ${{ steps.check.outputs.has_release }}"

  publish:
    needs: check-release
    if: ${{ github.ref == 'refs/heads/main' && needs.check-release.outputs.has_release == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug Info
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "has_release value: ${{ needs.check-release.outputs.has_release }}"
      
      - uses: actions/checkout@v3
      
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        
      - name: Download .autopub
        uses: actions/download-artifact@v3
        with:
          name: autopub-data
          path: .autopub

      - name: Build and publish
        run: |
          uvx --from autopub==1.0.0a26 --with pygithub autopub build
          uvx --from autopub==1.0.0a26 --with pygithub autopub prepare
          uvx --from autopub==1.0.0a26 --with pygithub autopub publish

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
